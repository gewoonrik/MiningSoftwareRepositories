  dropdown menu works only once  this has got to be something simple, but i cannot figure out how to correct it. i am using the   3 dropdown menu css and js.    the problem: i click the dropdown menu, it works. i select a link from the dropdown menu and when it takes me to that page, the dropdown menu does not work on that page.    the dropdown menu only works for 1 time.    html in application.html.erb:      ul class="list-unstyled"            li class="dropdown"             div class="btn btn-primary btn-pages" data-toggle="dropdown" dropdown  a href="#" id="pages" class="dropdown-toggle"  i class="icon-caret-down"  /i  /a  /div           ul class="dropdown-menu" aria-labelledby="pages"              li  %= link_to("contacts", contacts_path) %  /li           /ul         /li        /ul       js   jquery are loaded in application.html.erb:         !-- jquery   javascript cdn includes --   %= javascript_include_tag "application" %   script src="//code.jquery.com/jquery.js"  /script   script src="//netdna. cdn.com/ /3.0.0/js/ .min.js"  /script       it seems like the js or jquery needed for the action doesn't reload on page change.  what am i doing wrong?    thanks.    edit:  js code     +function ($) { "use strict";    // dropdown class definition   // =========================    var backdrop = '.dropdown-backdrop'   var toggle   = '[data-toggle=dropdown]'   var dropdown = function (element) {     var $el = $(element).on('click.bs.dropdown', this.toggle)   }    dropdown.prototype.toggle = function (e) {     var $this = $(this)      if ($this.is('.disabled, :disabled')) return      var $parent  = getparent($this)     var isactive = $parent.hasclass('open')      clearmenus()      if (!isactive) {       if ('ontouchstart' in document.documentelement    !$parent.closest('.navbar-nav').length) {         // if mobile we we use a backdrop because click events don't delegate         $(' div class="dropdown-backdrop"/ ').insertafter($(this)).on('click', clearmenus)       }        $parent.trigger(e = $.event('show.bs.dropdown'))        if (e.isdefaultprevented()) return        $parent         .toggleclass('open')         .trigger('shown.bs.dropdown')        $this.focus()     }      return false   }    dropdown.prototype.keydown = function (e) {     if (!/(38|40|27)/.test(e.keycode)) return      var $this = $(this)      e.preventdefault()     e.stoppropagation()      if ($this.is('.disabled, :disabled')) return      var $parent  = getparent($this)     var isactive = $parent.hasclass('open')      if (!isactive || (isactive    e.keycode == 27)) {       if (e.which == 27) $parent.find(toggle).focus()       return $this.click()     }      var $items = $('[role=menu] li:not(.divider):visible a', $parent)      if (!$items.length) return      var index = $items.index($items.filter(':focus'))      if (e.keycode == 38    index   0)                 index--                        // up     if (e.keycode == 40    index   $items.length - 1) index++                        // down     if (!~index)                                      index=0      $items.eq(index).focus()   }    function clearmenus() {     $(backdrop).remove()     $(toggle).each(function (e) {       var $parent = getparent($(this))       if (!$parent.hasclass('open')) return       $parent.trigger(e = $.event('hide.bs.dropdown'))       if (e.isdefaultprevented()) return       $parent.removeclass('open').trigger('hidden.bs.dropdown')     })   }    function getparent($this) {     var selector = $this.attr('data-target')      if (!selector) {       selector = $this.attr('href')       selector = selector    /#/.test(selector)    selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7     }      var $parent = selector    $(selector)      return $parent    $parent.length ? $parent : $this.parent()   }     // dropdown plugin definition   // ==========================    var old = $.fn.dropdown    $.fn.dropdown = function (option) {     return this.each(function () {       var $this = $(this)       var data  = $this.data('dropdown')        if (!data) $this.data('dropdown', (data = new dropdown(this)))       if (typeof option == 'string') data[option].call($this)     })   }    $.fn.dropdown.constructor = dropdown     // dropdown no conflict   // ====================    $.fn.dropdown.noconflict = function () {     $.fn.dropdown = old     return this   }     // apply to standard dropdown elements   // ===================================    $(document)     .on('click.bs.dropdown.data-api', clearmenus)     .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stoppropagation() })     .on('click.bs.dropdown.data-api'  , toggle, dropdown.prototype.toggle)     .on('keydown.bs.dropdown.data-api', toggle + ', [role=menu]' , dropdown.prototype.keydown)  }(window.jquery);    
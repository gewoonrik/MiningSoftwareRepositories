modify   less files to use an id selector  briefly, what i'm trying to do is apply a custom id selector on top of  .css so that i don't break other css on a website. so this :     .col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2, .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3, .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4, .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5, .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6, .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7, .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8, .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9, .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10, .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11, .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 {     position: relative;     min-height: 1px;     padding-left: 15px;     padding-right: 15px;     }      becomes this:     #my-id-selector .col-xs-1, #my-id-selector .col-sm-1, #my-id-selector .col-md-1, #my-id-selector .col-lg-1, #my-id-selector .col-xs-2, #my-id-selector .col-sm-2, #my-id-selector .col-md-2, #my-id-selector .col-lg-2, #my-id-selector .col-xs-3, #my-id-selector .col-sm-3, #my-id-selector .col-md-3, #my-id-selector .col-lg-3, #my-id-selector .col-xs-4, #my-id-selector .col-sm-4, #my-id-selector .col-md-4, #my-id-selector .col-lg-4, #my-id-selector .col-xs-5, #my-id-selector .col-sm-5, #my-id-selector .col-md-5, #my-id-selector .col-lg-5, #my-id-selector .col-xs-6, #my-id-selector .col-sm-6, #my-id-selector .col-md-6, #my-id-selector .col-lg-6, #my-id-selector .col-xs-7, #my-id-selector .col-sm-7, #my-id-selector .col-md-7, #my-id-selector .col-lg-7, #my-id-selector .col-xs-8, #my-id-selector .col-sm-8, #my-id-selector .col-md-8, #my-id-selector .col-lg-8, #my-id-selector .col-xs-9, #my-id-selector .col-sm-9, #my-id-selector .col-md-9, #my-id-selector .col-lg-9, #my-id-selector .col-xs-10, #my-id-selector .col-sm-10, #my-id-selector .col-md-10, #my-id-selector .col-lg-10, #my-id-selector .col-xs-11, #my-id-selector .col-sm-11, #my-id-selector .col-md-11, #my-id-selector .col-lg-11, #my-id-selector .col-xs-12, #my-id-selector .col-sm-12, #my-id-selector .col-md-12, #my-id-selector .col-lg-12 {     position:relative;     min-height:1px;     padding-left:15px;     padding-right:15px }      so, imagine this scenario, i think it's pretty common:    you use   (in our case, 3.1.1) to build a web/mobile app widget that needs to run inside another application. the widget will have its own css that  must not break the host application's css.     the widget will live in a nice little div with a specific id.    so what we're trying to do is modify the less files that compile   to reference that specific id. i'm getting close to doing this, but i keep running into issues. the current issue i have is that the   less code uses mixins to create grid-specific css (in the grid.less file). when i try to add my selector to the grid.less file, it doesn't behave like i'd expect/hope: instead of applying my id selector to all the class selectors in the grid.less file, it only applies to the first selector in a list of selectors.    (as a little background on   as i understand it (hopefully so those of you with less experience can answer my question even if you've never used  ): the source less files are all referenced via @import statements in the  .less file. i use grunt to compile the  .css and js files per  's website documentation (so a grunt.json file exists that orchestrates the less compiling and a bunch of other stuff).  .less uses @import to access variables.less, mixins.less, and grid.less, which are all players in this drama).    hopefully i can explain what i mean:    original code (  3.1.1)'s grid.less file contains:     // columns // // common styles for small and large grid columns .make-grid-columns();      that code calls a mixin in the mixin.less file that dynamically creates some column class selectors:     .make-grid-columns() {   // common styles for all sizes of grid columns, widths 1-12   .col(@index) when (@index = 1) { // initial     @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";     .col((@index + 1), @item);   }   .col(@index, @list) when (@index =  @grid-columns) { // general; "= " isn't a typo     @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";     .col((@index + 1), ~"@{list}, @{item}");   }   .col(@index, @list) when (@index   @grid-columns) { // terminal     @{list} {       position: relative;       // prevent columns from collapsing when empty       min-height: 1px;       // inner gutter via padding       padding-left:  (@grid-gutter-width / 2);       padding-right: (@grid-gutter-width / 2);     }   }   .col(1); // kickstart it }      i don't fully understand the code above, but i think it loops through the parameters it receives from the variables.less file that comes with  , and creates the list of class selectors into css that looks like this:     .col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2, .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3, .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4, .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5, .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6, .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7, .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8, .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9, .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10, .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11, .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 {    position: relative;    min-height: 1px;    padding-left: 15px;    padding-right: 15px; }      the modification i made was to add my custom id selector scope around the call, like below:     // columns // // common styles for small and large grid columns #my-id-selector .make-grid-columns();      the problem is that this doesn't apply my selector across all the dynamically generated columns that   creates in the mixin.less code, and instead only adds my id selector to the first selector in the list, like this:     #my-id-selector .col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2, .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3, .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4, .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5, .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6, .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7, .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8, .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9, .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10, .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11, .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 {     position: relative;     min-height: 1px;     padding-left: 15px;     padding-right: 15px; }      what i find odd is that if i just write a less file without the mixin to apply my id selector's scope to a list of selectors, i get the output that i'm expecting. for example, this...     #my-id-selector {     .col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2, .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3, .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4, .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5, .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6, .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7, .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8, .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9, .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10, .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11, .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12     {         position: relative;         min-height: 1px;         padding-left: 15px;         padding-right: 15px;         } }      ...produces the expected and much desired output:     #my-id-selector .col-xs-1,#my-id-selector .col-sm-1,#my-id-selector .col-md-1,#my-id-selector .col-lg-1,#my-id-selector .col-xs-2,#my-id-selector .col-sm-2,#my-id-selector .col-md-2,#my-id-selector .col-lg-2,#my-id-selector .col-xs-3,#my-id-selector .col-sm-3,#my-id-selector .col-md-3,#my-id-selector .col-lg-3,#my-id-selector .col-xs-4,#my-id-selector .col-sm-4,#my-id-selector .col-md-4,#my-id-selector .col-lg-4,#my-id-selector .col-xs-5,#my-id-selector .col-sm-5,#my-id-selector .col-md-5,#my-id-selector .col-lg-5,#my-id-selector .col-xs-6,#my-id-selector .col-sm-6,#my-id-selector .col-md-6,#my-id-selector .col-lg-6,#my-id-selector .col-xs-7,#my-id-selector .col-sm-7,#my-id-selector .col-md-7,#my-id-selector .col-lg-7,#my-id-selector .col-xs-8,#my-id-selector .col-sm-8,#my-id-selector .col-md-8,#my-id-selector .col-lg-8,#my-id-selector .col-xs-9,#my-id-selector .col-sm-9,#my-id-selector .col-md-9,#my-id-selector .col-lg-9,#my-id-selector .col-xs-10,#my-id-selector .col-sm-10,#my-id-selector .col-md-10,#my-id-selector .col-lg-10,#my-id-selector .col-xs-11,#my-id-selector .col-sm-11,#my-id-selector .col-md-11,#my-id-selector .col-lg-11,#my-id-selector .col-xs-12,#my-id-selector .col-sm-12,#my-id-selector .col-md-12,#my-id-selector .col-lg-12 {     position:relative;     min-height:1px;     padding-left:15px;     padding-right:15px }      you can see that my #my-id-selector was applied to all selectors in the list, and the only difference i can detect is a mixin call. so it would seem that the mixin evaluates after my selector id is applied.    if that's the case, is there some way to ensure that the mixin is evaluated first, then apply my scope?    has anyone tried to customize   so that it is id selector specific?     update:  a work around was to modify the mixins.less' .make-grid-columns() mixin to pass in my id selector. this is the code:     .make-grid-columns(@id_prefix: "") {   // common styles for all sizes of grid columns, widths 1-12   .col(@index) when (@index = 1) { // initial     @item: ~"@{id_prefix} .col-xs-@{index}, @{id_prefix} .col-sm-@{index}, @{id_prefix} .col-md-@{index}, @{id_prefix} .col-lg-@{index}";     .col((@index + 1), @item);   }   .col(@index, @list) when (@index =  @grid-columns) { // general; "= " isn't a typo     @item: ~"@{id_prefix} .col-xs-@{index}, @{id_prefix} .col-sm-@{index}, @{id_prefix} .col-md-@{index}, @{id_prefix} .col-lg-@{index}";     .col((@index + 1), ~"@{list}, @{item}");   }   .col(@index, @list) when (@index   @grid-columns) { // terminal     @{list} {       position: relative;       // prevent columns from collapsing when empty       min-height: 1px;       // inner gutter via padding       padding-left:  (@grid-gutter-width / 2);       padding-right: (@grid-gutter-width / 2);     }   }   .col(1); // kickstart it }      what's really gross about that is the amount of customization that i'll have to do in order to "fix" all of the   css so it uses my id selector. so i'm still looking for a better solution...  
how do display a collapsible tree in angularjs +    i am building a web app where i need to display a tree using lists.  my basic structure looks like this:     * node 1     * node 1.1         * node 1.1.1             * node 1.1.1.1         * node 1.1.2     * node 1.2             i'm trying to find something in angular or   that i can use such that:      at first view of the list, it is expanded up to the third layer.  in my fiddle, i would want to see node 1, node 1.1, node 1.1.1, node 1.1.2 and node 1.2 (all but the 4th layer - node 1.1.1.1)   on clicking on the list-style icon (not the word name of the node) the node collapses or expands    ideally, i would love for the icon to change also dependent on if the item is expanded.  a right arrow if there is more underneath, a down arrow if it is already expanded, and maybe a regular list item if there are no children      i am very new to angularjs and still quite new to   as well.  i see that angular has an accordion function which doesn't seem to quite handle everything i need it to.      i would love some direction on the best approach before i code a lot of logic into my web app that handles the different cases.  i think this must be a common problem so perhaps there is something ready made that i can utilize.  any guidance would be much appreciated.    html code:      div ng-app="myapp" ng-controller="controller"       my-directive  /my-directive       table style="width: 100%"  tbody  td           tree items="tree"  /tree       /td  /tbody  /table   /div       angular code:     var app = angular.module('myapp', []);  app.controller('controller', function ($scope){       $scope.tree=[{"name":"node 1","items":[{"name":"node 1.1","items":[{"name":"node 1.1.1","items":[{"name":"node 1.1.1.1","items":[]}]},{"name":"node 1.1.2","items":[]}]},{"name":"node 1.2","items":[]}]}];  }); app.directive('tree', function() {     return {         template: ' ul  tree-node ng-repeat="item in items"  /tree-node  /ul ',         restrict: 'e',         replace: true,         scope: {             items: '=items',         }     }; });  app.directive('treenode', function($compile) {     return {          restrict: 'e',         template: ' li  {{item.name}} /li ',         link: function(scope, elm, attrs) {         if (scope.item.items.length   0) {             var children = $compile(' tree items="item.items"  /tree ')(scope);             elm.append(children);         }     }     }; });    
how to manage complicated html boiler plate for detail views in django?  i have several update views of a complicated  profile  model that uses  django-crispy-forms  layouts.  i want a "readonly" overview view that presents the information from the other update views using a similar layout and styling for the data, just without the inputs.      i'm using      accordion  and  horizontal form  markup, which is conveniently taken care of for me using the crispy-forms  accordion layout object  and the default     (2) template pack.  typing out all of this boiler plate for my overview page is tedious and and redundant and difficult to read, e.g.      div class="accordion" id="accordion1"     div class="accordion-group"       div class="accordion-heading"         a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion1" href="#collapseone"        overview info panel #1        /a       /div       div id="collapseone" class="accordion-body collapse in"         div class="accordion-inner"            div class="control-group"             label class="control-label" for="inputfullname" customer number /label               div class="controls"                {{ object.customer_number }}              /div           /div           div class="control-group"             label class="control-label" for="inputfullname" name /label               div class="controls"                {{ object.full_name }}              /div           /div          ...         /div       /div     /div     div class="accordion-group"    ...      i tried creating a loop, but that just got ugly in my view code, where i had to create  ordereddict s or tuples of tuples of tuples in order to manage the accordion group and data ordering sequence.  i also tried creating custom template tags to wrap the boiler plate, but that doesn't help much either, e.g.     {% control_group 'customer number' %}   {{ object.customer_number }} {% end_control_group %} {% control_group 'name' %}   {{ object.full_name }} {% end_control_group %}      finally i just went ahead and made this detail view an  updateview  and passed it a crispy-forms layout with custom  readonlyfield  layout objects, which leaves my template looking like this:       {% crispy form %}      and my  layout  code in  forms.py  looking like this:     div(     accordiongroup(         'overview info panel #1',         div(             readonlyfield('customer_number'),             readonlyfield(label='name', value=form.instance.full_name),         ),      using the crispy-forms approach has the advantage of bringing consistency to the way my app manages layouts for both update and detail views, keeps the templates lean, and lets me repurpose labels and have relatively concise code for the normal  form.instance.field  use-case.  however, some things get more complex, like adding template filters, which i've done by adding a  function  parameter to my  readonlyfield .  that extra complexity, and the fact that i'm using a form layout and an update view for what should be a detail view, makes me think this may not be the best approach.    suggestions?  
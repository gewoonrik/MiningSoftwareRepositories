why is my   carousel not moving from the second slide?  i am using   2.1.1 for a site. when adding a slideshow using the   carousel plugin, the slideshow ends after reaching the final slide, instead of looping. this was apparently a bug in   2.x that was resolved in   3.    a full-site upgrade to   3 is not currently feasible, so i updated just the carousel plugin.    however, this has lead to an issue where the first slide transitions to the second, but then the slideshow stops.    this javascript error occurs:    uncaught typeerror: undefined is not a function js_plugins:482 (equivalent 147)    here is the html markup:      div class="container"       div id="carousel" class="carousel slide loading-indicator" style="margin-top: -40px; margin-bottom: 0; {if segment_1 != ""}z-index: -10;{/if}"           div class="carousel-inner"              {exp:low_reorder:entries set="homepage_keywords" channel="home"}                  div class="item{if count == 1} active{/if}"                       img src="{background_image}" alt="{keyword}" title="{keyword}" /                   /div              {/exp:low_reorder:entries}             {if segment_1 == ""}                  div class="carousel-caption"                       a href="{site_url}media/latest_news" style="colour: white !important; text-decoration: none !important;"                           p                               strong latest news:  /strong                              {exp:channel:entries channel="latest_news" limit="1" orderby="date" sort="desc"}                                 {title}  rarr;                             {/exp:channel:entries}                          /p                       /a                   /div              {/if}          /div       /div   /div       the   3 carousel plugin javascript has not been modified and is as follows:     /* ========================================================================  *  : carousel.js v3.2.0  *   .com/javascript/#carousel  * ========================================================================  * copyright 2011-2014  , inc.  * licensed under mit (  /blob/master/license)  * ======================================================================== */   +function ($) {   'use strict';    // carousel class definition   // =========================    var carousel = function (element, options) {     this.$element    = $(element).on('keydown.bs.carousel', $.proxy(this.keydown, this))     this.$indicators = this.$element.find('.carousel-indicators')     this.options     = options     this.paused      =     this.sliding     =     this.interval    =     this.$active     =     this.$items      = null      this.options.pause == 'hover'    this.$element       .on('mouseenter.bs.carousel', $.proxy(this.pause, this))       .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))   }    carousel.version  = '3.2.0'    carousel.defaults = {     interval: 5000,     pause: 'hover',     wrap: true   }    carousel.prototype.keydown = function (e) {     switch (e.which) {       case 37: this.prev(); break       case 39: this.next(); break       default: return     }      e.preventdefault()   }    carousel.prototype.cycle = function (e) {     e || (this.paused = false)      this.interval    clearinterval(this.interval)      this.options.interval          !this.paused          (this.interval = setinterval($.proxy(this.next, this), this.options.interval))      return this   }    carousel.prototype.getitemindex = function (item) {     this.$items = item.parent().children('.item')     return this.$items.index(item || this.$active)   }    carousel.prototype.to = function (pos) {     var that        = this     var activeindex = this.getitemindex(this.$active = this.$element.find('.item.active'))      if (pos   (this.$items.length - 1) || pos   0) return      if (this.sliding)       return this.$element.one('slid.bs.carousel', function () {that.to(pos)}) // yes, "slid"     if (activeindex == pos) return this.pause().cycle()      return this.slide(pos   activeindex ? 'next' : 'prev', $(this.$items[pos]))   }    carousel.prototype.pause = function (e) {     e || (this.paused = true)      if (this.$element.find('.next, .prev').length    $.support.transition) {       this.$element.trigger($.support.transition.end)       this.cycle(true)     }      this.interval = clearinterval(this.interval)      return this   }    carousel.prototype.next = function () {     if (this.sliding) return     return this.slide('next')   }    carousel.prototype.prev = function () {     if (this.sliding) return     return this.slide('prev')   }    carousel.prototype.slide = function (type, next) {     var $active   = this.$element.find('.item.active')     var $next     = next || $active[type]()     var iscycling = this.interval     var direction = type == 'next' ? 'left' : 'right'     var fallback  = type == 'next' ? 'first' : 'last'     var that      = this      if (!$next.length) {       if (!this.options.wrap) return       $next = this.$element.find('.item')[fallback]()     }      if ($next.hasclass('active')) return (this.sliding = false)      var relatedtarget = $next[0]     var slideevent = $.event('slide.bs.carousel', {       relatedtarget: relatedtarget,       direction: direction     уе})     this.$element.trigger(slideevent)     if (slideevent.isdefaultprevented()) return      this.sliding = true      iscycling    this.pause()      if (this.$indicators.length) {       this.$indicators.find('.active').removeclass('active')       var $nextindicator = $(this.$indicators.children()[this.getitemindex($next)])       $nextindicator    $nextindicator.addclass('active')     }      var slidevent = $.event('slid.bs.carousel', { relatedtarget: relatedtarget, direction: direction }) // yes, "slid"     if ($.support.transition    this.$element.hasclass('slide')) {       $next.addclass(type)       $next[0].offsetwidth // force reflow       $active.addclass(direction)       $next.addclass(direction)       $active         .one('bstransitionend', function () {           $next.removeclass([type, direction].join(' ')).addclass('active')           $active.removeclass(['active', direction].join(' '))           that.sliding = false           settimeout(function () {that.$element.trigger(slidevent)}, 0)         })         .emulatetransitionend($active.css('transition-duration').slice(0, -1) * 1000)     } else {       $active.removeclass('active')       $next.addclass('active')       this.sliding = false       this.$element.trigger(slidevent)     }      iscycling    this.cycle()      return this   }     // carousel plugin definition   // ==========================    function plugin(option) {     return this.each(function () {       var $this   = $(this)       var data    = $this.data('bs.carousel')       var options = $.extend({}, carousel.defaults, $this.data(), typeof option == 'object'    option)       var action  = typeof option == 'string' ? option : options.slide        if (!data) $this.data('bs.carousel', (data = new carousel(this, options)))       if (typeof option == 'number') data.to(option)       else if (action) data[action]()       else if (options.interval) data.pause().cycle()     })   }    var old = $.fn.carousel    $.fn.carousel             = plugin   $.fn.carousel.constructor = carousel     // carousel no conflict   // ====================    $.fn.carousel.noconflict = function () {     $.fn.carousel = old     return this   }     // carousel data-api   // =================    $(document).on('click.bs.carousel.data-api', '[data-slide], [data-slide-to]', function (e) {     var href     var $this   = $(this)     var $target = $($this.attr('data-target') || (href = $this.attr('href'))    href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7     if (!$target.hasclass('carousel')) return     var options = $.extend({}, $target.data(), $this.data())     var slideindex = $this.attr('data-slide-to')     if (slideindex) options.interval = false      plugin.call($target, options)      if (slideindex) {$target.data('bs.carousel').to(slideindex)}      e.preventdefault()   })    $(window).on('load', function () {     $('[data-ride="carousel"]').each(function () {       var $carousel = $(this)       plugin.call($carousel, $carousel.data())     })   })  }(jquery);      thanks for your help.  
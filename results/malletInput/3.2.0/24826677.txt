  carousel not cycling after first click  have just updated my carousel.js to 3.2.0 as the previous version active class was applying after the item had slid.    here is my markup.      div id="carousel-example-generic" class="carousel slide" data-ride="carousel"                   !-- indicators --                   ol class="carousel__indicators"                       li data-target="#carousel-example-generic" data-slide-to="0" class="active"  /li                       li data-target="#carousel-example-generic" data-slide-to="1"  /li                       li data-target="#carousel-example-generic" data-slide-to="2"  /li                   /ol                    !-- wrapper for slides --                   div class="carousel__items"                       figure class="carousel__items__item active"                          {{ "1000x250" | placeholder | image_tag:'slide 1' }}                          figcaption class="carousel__items__item__caption" slide 1 /figcaption                       /figure                       figure class="carousel__items__item"                          {{ "1000x250" | placeholder | image_tag:'slide 2' }}                          figcaption class="carousel__items__item__caption" slide 2 /figcaption                       /figure                       figure class="carousel__items__item"                          {{ "1000x250" | placeholder | image_tag:'slide 3' }}                          figcaption class="carousel__items__item__caption" slide 3 /figcaption                       /figure                   /div                    !-- controls --                   a class="left carousel__control" href="#carousel-example-generic" role="button" data-slide="prev"                       i class="fa fa-angle-left"  /i                   /a                   a class="right carousel__control" href="#carousel-example-generic" role="button" data-slide="next"                       i class="fa fa-angle-right"  /i                   /a               /div       my jquery     /* ========================================================================  *  : carousel.js v3.2.0  *   .com/javascript/#carousel  * ========================================================================  * copyright 2011-2014  , inc.  * licensed under mit (  /blob/master/license)  * ======================================================================== */   +function ($) {   'use strict';    // carousel class definition   // =========================    var carousel = function (element, options) {     this.$element    = $(element).on('keydown.bs.carousel', $.proxy(this.keydown, this))     this.$indicators = this.$element.find('.carousel__indicators')     this.options     = options     this.paused      =     this.sliding     =     this.interval    =     this.$active     =     this.$items      = null      this.options.pause == 'hover'    this.$element       .on('mouseenter.bs.carousel', $.proxy(this.pause, this))       .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))   }    carousel.version  = '3.2.0'    carousel.defaults = {     interval: 5000,     pause: 'hover',     wrap: true   }    carousel.prototype.keydown = function (e) {     switch (e.which) {       case 37: this.prev(); break       case 39: this.next(); break       default: return     }      e.preventdefault()   }    carousel.prototype.cycle = function (e) {     e || (this.paused = false)      this.interval    clearinterval(this.interval)      this.options.interval          !this.paused          (this.interval = setinterval($.proxy(this.next, this), this.options.interval))      return this   }    carousel.prototype.getitemindex = function (item) {     this.$items = item.parent().children('.carousel__items__item')     return this.$items.index(item || this.$active)   }    carousel.prototype.to = function (pos) {     var that        = this     var activeindex = this.getitemindex(this.$active = this.$element.find('.carousel__items__item.active'))      if (pos   (this.$items.length - 1) || pos   0) return      if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, "slid"     if (activeindex == pos) return this.pause().cycle()      return this.slide(pos   activeindex ? 'next' : 'prev', $(this.$items[pos]))   }    carousel.prototype.pause = function (e) {     e || (this.paused = true)      if (this.$element.find('.next, .prev').length    $.support.transition) {       this.$element.trigger($.support.transition.end)       this.cycle(true)     }      this.interval = clearinterval(this.interval)      return this   }    carousel.prototype.next = function () {     if (this.sliding) return     return this.slide('next')   }    carousel.prototype.prev = function () {     if (this.sliding) return     return this.slide('prev')   }    carousel.prototype.slide = function (type, next) {     var $active   = this.$element.find('.carousel__items__item.active')     var $next     = next || $active[type]()     var iscycling = this.interval     var direction = type == 'next' ? 'left' : 'right'     var fallback  = type == 'next' ? 'first' : 'last'     var that      = this      if (!$next.length) {       if (!this.options.wrap) return       $next = this.$element.find('.carousel__items__item')[fallback]()     }      if ($next.hasclass('active')) return (this.sliding = false)      var relatedtarget = $next[0]     var slideevent = $.event('slide.bs.carousel', {       relatedtarget: relatedtarget,       direction: direction     })     this.$element.trigger(slideevent)     if (slideevent.isdefaultprevented()) return      this.sliding = true      iscycling    this.pause()      if (this.$indicators.length) {       this.$indicators.find('.active').removeclass('active')       var $nextindicator = $(this.$indicators.children()[this.getitemindex($next)])       $nextindicator    $nextindicator.addclass('active')     }      var slidevent = $.event('slid.bs.carousel', { relatedtarget: relatedtarget, direction: direction }) // yes, "slid"     if ($.support.transition    this.$element.hasclass('slide')) {       $next.addclass(type)       $next[0].offsetwidth // force reflow       $active.addclass(direction)       $next.addclass(direction)       $active         .one('bstransitionend', function () {           $next.removeclass([type, direction].join(' ')).addclass('active')           $active.removeclass(['active', direction].join(' '))           that.sliding = false           settimeout(function () {             that.$element.trigger(slidevent)           }, 0)         })         .emulatetransitionend($active.css('transition-duration').slice(0, -1) * 1000)     } else {       $active.removeclass('active')       $next.addclass('active')       this.sliding = false       this.$element.trigger(slidevent)     }      iscycling    this.cycle()      return this   }     // carousel plugin definition   // ==========================    function plugin(option) {     return this.each(function () {       var $this   = $(this)       var data    = $this.data('bs.carousel')       var options = $.extend({}, carousel.defaults, $this.data(), typeof option == 'object'    option)       var action  = typeof option == 'string' ? option : options.slide        if (!data) $this.data('bs.carousel', (data = new carousel(this, options)))       if (typeof option == 'number') data.to(option)       else if (action) data[action]()       else if (options.interval) data.pause().cycle()     })   }    var old = $.fn.carousel    $.fn.carousel             = plugin   $.fn.carousel.constructor = carousel     // carousel no conflict   // ====================    $.fn.carousel.noconflict = function () {     $.fn.carousel = old     return this   }     // carousel data-api   // =================    $(document).on('click.bs.carousel.data-api', '[data-slide], [data-slide-to]', function (e) {     var href     var $this   = $(this)     var $target = $($this.attr('data-target') || (href = $this.attr('href'))    href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7     if (!$target.hasclass('carousel')) return     var options = $.extend({}, $target.data(), $this.data())     var slideindex = $this.attr('data-slide-to')     if (slideindex) options.interval = false      plugin.call($target, options)      if (slideindex) {       $target.data('bs.carousel').to(slideindex)     }      e.preventdefault()   })    $(window).on('load', function () {     $('[data-ride="carousel"]').each(function () {       var $carousel = $(this)       plugin.call($carousel, $carousel.data())     })   })  }(jquery);      so basically what is happening now is that it works on the first slide interaction, either clicking the indicators or controls, but then it stops working.    nothing shows up in the console either.    any ideas?  
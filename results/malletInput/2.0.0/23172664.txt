css not working - what's wrong with this code?  so, i wrote a node.js script for a cards against humanity clone which can be played in-browser.  here's the script that is started to run all the code:     process.title = 'cae';  var express = require('express'); var http = require('http'); var path = require('path'); var fs = require('fs');  var flash = require('connect-flash');  var log = require('logule').init(module);  var orm = require('orm');  var app = express();  var _ = require('underscore'); var extend = require('extend');  var config = require('./config'); require('./lib/settings').load(config.settings);  var users = require('./lib/users'); var permissions = require('./lib/permissions');  app.set('views', __dirname + '/views'); app.set('view engine', 'hbs');  var hbs = require('hbs'); require('handlebars-layouts')(hbs.handlebars);  if (config.analytics) {     hbs.handlebars.registerpartial('util/analytics', fs.readfilesync(__dirname + '/views/util/analytics.hbs', 'utf8'));     app.locals.useanalytics = true; }  hbs.handlebars.registerpartial('layouts/default', fs.readfilesync(__dirname + '/views/layouts/default.hbs', 'utf8')); hbs.handlebars.registerpartial('derp1', fs.readfilesync(__dirname + '/views/util/derp.hbs', 'utf8')); hbs.handlebars.registerpartial('derp2', fs.readfilesync(__dirname + '/views/util/derp2.hbs', 'utf8'));  hbs.handlebars.registerpartial('globalchat', fs.readfilesync(__dirname + '/views/chat/chat.hbs', 'utf8')); hbs.handlebars.registerpartial('chatmessage', fs.readfilesync(__dirname + '/views/chat/message.hbs', 'utf8'));  hbs.handlebars.registerpartial('watermarkicon', fs.readfilesync(__dirname + '/views/util/watermark_icon.hbs', 'utf8'));  require('./lib/helpers/input')(hbs); require('./lib/helpers/util')(hbs);  var versionstring = 'v' + require('./package.json').version; hbs.registerhelper('version', function () {     return versionstring; });  hbs.registerhelper('ajaxloader', function () {     return new hbs.handlebars.safestring(' img src="/img/ajax-loader.gif" alt="loading..." '); });  hbs.registerhelper('ifcond', function (v1, operator, v2, options) {     switch (operator) {         case '==':             return (v1 == v2) ? options.fn(this) : options.inverse(this);         case '===':             return (v1 === v2) ? options.fn(this) : options.inverse(this);         case ' ':             return (v1   v2) ? options.fn(this) : options.inverse(this);         case ' =':             return (v1  = v2) ? options.fn(this) : options.inverse(this);         case ' ':             return (v1   v2) ? options.fn(this) : options.inverse(this);         case ' =':             return (v1  = v2) ? options.fn(this) : options.inverse(this);         case '||':             return (v1 || v2) ? options.fn(this) : options.inverse(this);         case '  ':             return (v1    v2) ? options.fn(this) : options.inverse(this);         default:             return options.inverse(this);     } });  var minifproduction = ''; if (config.env != 'development') {     minifproduction = '.min'; } hbs.registerhelper('minifdev', function () {     return minifdev; });  app.use(express.urlencoded()); app.use(express.json());  app.use(express.methodoverride());  app.use(express.cookieparser()); app.use(express.session({secret: config.sessionsecret})); app.use(flash());  app.use(express.favicon(path.join(__dirname, 'public/favicon.ico')));  app.use(express.static(path.join(__dirname, 'dist')));  app.locals.themes = config.themes;  var themeids = _.pluck(config.themes, 'id'); app.use(function (req, res, next) {     var themeid = req.cookies.theme;     if (!themeid || !_.contains(themeids, themeid)) {         themeid = config.defaulttheme;     }      res.locals.theme = _.find(config.themes,function (theme) {         return theme.id == themeid;     }).file;      next(); });  var ajaxauth = function (req, res, next) {     if (req.path != '/ajax/user/login'    req.path.indexof('/ajax/') == 0    !req.session.user) {         res.send(403);         return;     }      next(); };  var auth = function (req, res, next) {     if (!req.session.user            !_.contains(['/', '/user/login', '/ajax/user/login'], req.path)            !(/^\/info\/.+/.test(req.path)    req.method == 'get')            !(/^\/game\/join\/\d+/.test(req.path)    req.method == 'get')            !(/^\/game\/lobby\/\d+/.test(req.path)    req.method == 'get')            !(/^\/game\/play\/\d+/.test(req.path)    req.method == 'get')) {          req.flash('error', 'you need to log in to do that');         req.flash('loginredirect', req.path);         res.redirect('/');         return;     }      if (req.session.user) {         var user = users.get(req.session.user.id);          if (user) {             user.resettimeout();              var data = user.clientdata;             data.ip = req.ip;             data.useragent = req.header('user-agent');         } else {             var id = req.session.user.id;             var name = req.session.user.name;             req.session.user = null;             log.debug(name + '/' + id + ': trying to regain previous user');              user = users.findbyname(name);             if (!user) {                 user = users.get(id);                 if (!user) {                     users.login(req.session, name, null, id, function () {                         res.locals.user = req.session.user;                         next();                     });                     return;                 }             }         }     }      res.locals.user = req.session.user;      next(); };  var permissions = function (req, res, next) {     if (req.session.user    !_.contains(req.session.user.permissions, permissions.admin.id)) {         if (req.path.indexof('/admin') == 0) {             req.flash('error', 'restricted area. br/  br/  small trespassers will be shot. survivors will be shot again. /small ');             res.redirect('/');             return;         } else if (req.path.indexof('/ajax/admin') == 0) {             res.send(403);             return;         }     }      next(); };  app.use(ajaxauth); app.use(auth); app.use(permissions);  app.use(function (req, res, next) {     res.locals(req.flash());      next(); });  if (config.trustproxy) {     app.enable('trust proxy'); }  // game  var game = require('./lib/game'); game.load(__dirname, config);  log.info('loaded game data (' + game.cards.sets.length + ' sets, ' + game.cards.expansions.length + ' expansions, ' +     game.cards.blackcards.length + ' black cards, ' + game.cards.whitecards.length + ' white cards' + ')');  // pages  log.debug('loading application...');  app.use(app.router);  if (config.env == 'development') {     app.use(express.errorhandler()); }  require('./routes/index')(app); require('./routes/info')(app); require('./routes/deck')(app); require('./routes/user')(app); require('./routes/game')(app, game); require('./routes/admin')(app);  // ajax  require('./routes/ajax/user')(app); require('./routes/ajax/chat')(app); require('./routes/ajax/game')(app, game); require('./routes/ajax/admin')(app, config);  // database  log.debug('connecting to database...'); orm.connect(config.database.url, function (err, db) {     if (err) {         log.error(err);         return;     }      var startserver = function () {         http.createserver(app).listen(config.port, function () {             log.info('server listening on port ' + config.port + '.');         });     };      require('./lib/model').load(db);      log.info('database connection established.');      permissions.load(startserver); });      and here's the /views/index.hbs code:     {{#extend 'layouts/default'}}      {{#replace 'content'}}          noscript               h2 class="has-error"                  javascript required              /h2                p class="has-error"                  javascript has to be enabled to play this game.              /p           /noscript           {{#unless user}}              h2 login /h2                p                  you will not be able to play without logging in. br/                  logging in is free and painless - just select a name!                  br/                   strong a password is only required if you registered your name. /strong               /p                form autocomplete="on" method="post" id="login" action="/user/login" class="form-inline"                   div class="form-group"                       label class="sr-only" for="name" name: /label                       input type="text" class="form-control" id="name" name="name" placeholder="name"                   /div                    div class="form-group"                       label class="sr-only" for="password" password: /label                       input type="password" class="form-control" id="password" name="password" placeholder="password"                   /div                    input type="hidden" id="redirect" name="redirect" value="{{{loginredirect}}}"                    input type="submit" value="login"               /form          {{/unless}}          {{#if user}}              a href="/game/create"                   h2 class="button-play"                       i class="glyphicon glyphicon-plus"  /i  nbsp;host                  /h2               /a                a href="/games"                   h2 class="button-play"                       i class="glyphicon glyphicon-ok"  /i  nbsp;play                  /h2               /a          {{/if}}           h2 changes /h2          {{#each changes}}              h3 {{{date}}} /h3               ul                  {{#each this.changes}}                      li {{{this}}} /li                  {{/each}}              /ul          {{/each}}           a href="/info/changes" full change log /a            h2 about / licenses /h2            p              cards against equestria is a  a href=" " cards against humanity /a              clone. br/              cards against humanity is a trademark of cards against humanity llc. cards against humanity llc does not             endorse or sponsor this clone.          /p           p               a href=" " cards against humanity /a  is available under a              a href=" " creative commons by-nc-sa 2.0 license /a .          /p            p              cards against equestria is licensed under a              a href=" " creative commons by-nc-sa 2.0 license /a              and was written by  a href="/info/about" rylius /a .             source code is available on  a href=" " github /a .          /p      {{/replace}}      {{#append 'defer'}}          script              $.ajaxsetup({cache: false});                  {{#if user}}                 $(window).bind('beforeunload', function () {                     interruptchatlisten();                 });                  var chat = initchat({id: {{user.id}}, name: '{{user.name}}'}, $('#chat-global').find('  ul'));                 ko.applybindings(chat);                 {{/if}}              var $name = $('#name');             $name.val($.cookie('name'));             $('#login').on('submit', function () {                 savename($name.val());             });          /script      {{/append}}      {{#replace 'initglobalchat'}}{{/replace}}  {{/extend}}      could anyone point out what's wrong with any of this code? if you'd like to see any more of it for any reasons, just let me know.  basically, the whole webserver starts up fine, but when i navigate to the server on chrome, it doesn't show any css at all.  just plain text.    all the views and such on the frontend use  . thanks in advance.  
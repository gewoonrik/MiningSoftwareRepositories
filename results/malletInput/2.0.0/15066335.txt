bottstrap responsive layout does not work properly  using   2.2 i' ve got the following problem:    when i narrow my firefox window with the responsive layout, the nav-bar disappears and i am getting a button in the right corner instead. but clicking on that button does not do anything (normally, the menu should pop out).    i copied this html       - /example-responsive-design-with- - .html     and i replaced the css and js imports by the following:      link href=" /css/ .css" rel="stylesheet"   link href=" /css/ -responsive.css" rel="stylesheet"   script src=" /js/ .js"  /script       which are the standard .css and js files which one gets when downloading  . the css and the  .js are loaded properly.    the  .js does contain the collapse section (i ve pasted that part below)    has anyone got any idea, why clicking on the button after collapse does not have any effect? i am using firefox 18.0.2, the responsive layout works when opening other sites. thanks a lot    collapse section of  .js:     /* =============================================================  *  -collapse.js v2.2.2  * http:// .github.com/ /javascript.html#collapse  * =============================================================  * copyright 2012  , inc.  *  * licensed under the apache license, version 2.0 (the "license");  * you may not use this file except in compliance with the license.  * you may obtain a copy of the license at  *  *   *  * unless required by applicable law or agreed to in writing, software  * distributed under the license is distributed on an "as is" basis,  * without warranties or conditions of any kind, either express or implied.  * see the license for the specific language governing permissions and  * limitations under the license.  * ============================================================ */   !function ($) {    "use strict"; // jshint ;_;    /* collapse public class definition   * ================================ */    var collapse = function (element, options) {     this.$element = $(element)     this.options = $.extend({}, $.fn.collapse.defaults, options)      if (this.options.parent) {       this.$parent = $(this.options.parent)     }      this.options.toggle    this.toggle()   }    collapse.prototype = {      constructor: collapse    , dimension: function () {       var haswidth = this.$element.hasclass('width')       return haswidth ? 'width' : 'height'     }    , show: function () {       var dimension         , scroll         , actives         , hasdata        if (this.transitioning) return        dimension = this.dimension()       scroll = $.camelcase(['scroll', dimension].join('-'))       actives = this.$parent    this.$parent.find('  .accordion-group   .in')        if (actives    actives.length) {         hasdata = actives.data('collapse')         if (hasdata    hasdata.transitioning) return         actives.collapse('hide')         hasdata || actives.data('collapse', null)       }        this.$element[dimension](0)       this.transition('addclass', $.event('show'), 'shown')       $.support.transition    this.$element[dimension](this.$element[0][scroll])     }    , hide: function () {       var dimension       if (this.transitioning) return       dimension = this.dimension()       this.reset(this.$element[dimension]())       this.transition('removeclass', $.event('hide'), 'hidden')       this.$element[dimension](0)     }    , reset: function (size) {       var dimension = this.dimension()        this.$element         .removeclass('collapse')         [dimension](size || 'auto')         [0].offsetwidth        this.$element[size !== null ? 'addclass' : 'removeclass']('collapse')        return this     }    , transition: function (method, startevent, completeevent) {       var that = this         , complete = function () {             if (startevent.type == 'show') that.reset()             that.transitioning = 0             that.$element.trigger(completeevent)           }        this.$element.trigger(startevent)        if (startevent.isdefaultprevented()) return        this.transitioning = 1        this.$element[method]('in')        $.support.transition    this.$element.hasclass('collapse') ?         this.$element.one($.support.transition.end, complete) :         complete()     }    , toggle: function () {       this[this.$element.hasclass('in') ? 'hide' : 'show']()     }    }    /* collapse plugin definition   * ========================== */    var old = $.fn.collapse    $.fn.collapse = function (option) {     return this.each(function () {       var $this = $(this)         , data = $this.data('collapse')         , options = typeof option == 'object'    option       if (!data) $this.data('collapse', (data = new collapse(this, options)))       if (typeof option == 'string') data[option]()     })   }    $.fn.collapse.defaults = {     toggle: true   }    $.fn.collapse.constructor = collapse    /* collapse no conflict   * ==================== */    $.fn.collapse.noconflict = function () {     $.fn.collapse = old     return this   }    /* collapse data-api   * ================= */    $(document).on('click.collapse.data-api', '[data-toggle=collapse]', function (e) {     var $this = $(this), href       , target = $this.attr('data-target')         || e.preventdefault()         || (href = $this.attr('href'))    href.replace(/.*(?=#[^\s]+$)/, '') //strip for ie7       , option = $(target).data('collapse') ? 'toggle' : $this.data()     $this[$(target).hasclass('in') ? 'addclass' : 'removeclass']('collapsed')     $(target).collapse(option)   })      `  
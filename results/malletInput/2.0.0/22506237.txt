  typeahead.js process() populates list with undefineds  i seem to have the same problem as    typeahead ajax results undefined  but that has gone unsolved, so i am asking again, hopefully i can provide some missing details.    i am using the standalone typeahead 0.10.2 along with   2.3.1.  underscore is 1.6.0.  complete list of included libraries is:      script src="/static/portal/js/jquery-1.9.1.min.js"  /script   script src="/static/portal/js/jquery-ui-1.10.2.custom.min.js"  /script   script src="/static/portal/js/ .min.js"  /script   script src="/static/portal/js/typeahead.bundle.min.js"  /script   script src="/static/portal/js/hogan-2.0.0.min.js"  /script   script src="/static/portal/js/underscore-min.js"  /script       for my first try, i modelled my script on    -typeahead , and everything seems to work, right up to the call to process().  rather than populating the autosuggest drop-down with my results, it only contains 'undefined' values (the right number of elements though).     $("#create_track").click(function() {     var names_id_map = {};     $('#ul_results').addclass('hide');     $('#create_track_form').removeclass('hide');     // use debounce from underscore.js to throttle requests to server     var suggestartists = _.debounce(function(query, process) {         var artist_names = [];         $.get(artist_names_url, { q: query }, function (data) {             // data = {"results": [{"id": "artist_123", "name": "xyz"}, ...]}             $.each(data, function (key, val) {                 if (key == "results") {                     $.each(val, function (i, item) {                         artist_display = item.name + ' - ' + item.id;                         artist_names.push(artist_display);                         names_id_map[artist_display] = item.id;                     });                 }             });             process(artist_names);         });     }, 300); // rate limit requests to server      $("#artist_name").typeahead(null, {         name: 'artist-names',         minlength: 1,         source: function (query, process) {             suggestartists(query, process);         },         updater: function (item) {             console.dir('updater: ' + item); // never output             $("#artist_id").val(names_id_map[item]);             // return value which should be selected in drop-down             // return item;         },     });      return false; });      that particular tutorial may have been created for the old  -bundled version of typeahead.  using the documentation for the newer standalone version of typeahead, i came up with this, which behaves the same, resulting in a menu of the right number of undefineds:     $("#create_track").click(function() {     var names_id_map = {};     $('#ul_results').addclass('hide');     $('#create_track_form').removeclass('hide');      var artistnames = new bloodhound({         name: 'artist-names',         datumtokenizer: bloodhound.tokenizers.whitespace,         querytokenizer: bloodhound.tokenizers.whitespace,         remote: {             url: artist_names_url + '?q=%query',             //ratelimitby: debounce, // debounce is not defined?             ratelimitwait: 300,             filter: function(data) {                 var artist_names = [];                 // data = {"results": [{"id": "artist_123", "name": "xyz"}, ...]}                 $.each(data, function (key, val) {                     if (key == "results") {                         $.each(val, function (i, item) {                             artist_display = item.name + ' - ' + item.id;                             artist_names.push(artist_display);                             names_id_map[artist_display] = item.id;                         });                     }                 });                 return artist_names;             },         }     });     artistnames         .initialize()         .done(function() { console.log('artistnames init success'); });      $("#artist_name").typeahead(null, {         minlength: 1,         source: artistnames.ttadapter(),     });      return false; });      if i populate it with local data like this:     $("#create_track").click(function() {     var names_id_map = {};     $('#ul_results').addclass('hide');     $('#create_track_form').removeclass('hide');      var artistnames = new bloodhound({         name: 'artist-names',         datumtokenizer: bloodhound.tokenizers.whitespace,         querytokenizer: bloodhound.tokenizers.whitespace,         local: ["abc", "def", "ghi", "jkl"],     });     artistnames.initialize()         .done(function() { console.log('artistnames init success'); });      $("#artist_name").typeahead(null, {         minlength: 1,         source: artistnames.ttadapter(),     });      return false; })      i can type "a" or "d", for example, and get a single "undefined" suggestion.  typing "b", "c", or "z" gives no suggestion.    i've read just about everything i could find about typeahead on google   so over the last day.  i am confident my json is decoded properly, and in all cases my artist_names is a native js array of strings.       edit      re-starting with the examples at    /typeahead.js/blob/master/doc/bloodhound.md#api  (and prompted by this other duplicate  why does bloodhound.get() return undefined? ), i realized my array of local values in fact needs to be a hash/dictionary in co-operation with datumtokenizer   the typeahead's displaykey.  i have the simple example now working for single-leading letter suggestions with:      var artistnames = new bloodhound({      name: 'artist-names',     datumtokenizer: function (d) { return d.d; },     querytokenizer: bloodhound.tokenizers.whitespace,      local: [{"d": "abc"}, {"d": "aaa"}, {"d": "aab"}, {"d": "def"}, {"d": "ghi"}, {"d": "jkl"}, {"d": "john coltrane"}],  });  artistnames.initialize().done(function() { alert('setup ok'); });  $("#artist_name").typeahead(null, {      minlength: 1,      displaykey: "d",     source: artistnames.ttadapter(),  });      my initial syntax came from some of the tutorials i had found via google which were probably using the old   version of the library (ex. from the one i linked to @ top of this post:  "then a simple array of names (['john smith','jane smith',...]) is passed to the process() callback." ).  
angular directive that adds select2 corrupts model?  i've created a table with ng-repeat and a directive to add a select2 ddl when you click on one of the cells. everything works beautifully, the selected value is updated in the model (everything with the select2 works as expected), but somehow the model seems to be corrupted by having this directive included in the code (whether i have selected an item from the ddl or not).    after the table is loaded with the data, if i try to remove an item from the model (with splice):     $scope.info.splice(index,1);      or even replace the entire model with a copy of the original model:     $scope.info = angular.copy($scope.info2);      i get an error in the console that says 'array.prototype.foreach' is null or not an object.    so far, i've only seen this behavior in ie8 (the browser we support).  i do not see this happen in chrome.    if i remove the 'click-to-edit-select2' from the input in the directive template, i do not see the error, so i can't help but think it's a problem within the directive, or even worse, within the select2 scripts that i have no idea how to pinpoint (hopefully not though).    apologies in advance!  i started to create a plunk, but realized that plunks don't work in ie, so it would be difficult to see the error i'm referring to.    i should also mention, that not only are we supporting ie8, we are also using older versions of scripts:   angular.js:  1.2.19   select2-min.js: 3.4.8   ui- : 0.8.0 (and templates)    .js: 2.3.1    .css: 2.3.1    please take a look at the code and let me know if there is a way to eliminate this error:    html:      body ng-app="app" ng-controller="testcontroller"   table class="table table-bordered"           thead             tr role="row"               th tabindex="0" class="sorting" aria-label="" ng-click="predicate = 'id'; reverse=!reverse"                id              /th               th tabindex="0" class="no_edit sorting" aria-label=""                description              /th             /tr           /thead           tbody ng-repeat="item in info"             tr               td click-to-edit-select2="item.id"                {{item.id}}              /td               td                {{item.description}}              /td             /tr           /tbody         /table   /body       controller:     var app = angular.module("app", ["ui.select2", "ui. ", "click-to-edit-select2"]); app.controller('testcontroller', function($scope, $http, $element, $filter, $modal) {   $scope.info2 = [{     "uniqueindex": "t1",     "status": "",     "id": "1",     "description": "this description",    }, {     "uniqueindex": "t2",     "status": "",     "id": "2",     "description": "that description",    }];    //this works . . .initializing the table, before the directive is applied   $scope.info = angular.copy($scope.info2);      $scope.deleterow = function(item) {         //either one of these statements throws the error in the console,          //and the model is not updated in the view         $scope.info = angular.copy($scope.info2);         $scope.info.splice(0, 1);      }  })      directive:     angular.module('click-to-edit-select2', [])   .directive("clicktoeditselect2", function() {       var editortemplate = ' td class="click-to-edit-select2" ' +       ' div style="height:20px" ng-click="enableeditor()" ng-hide="view.editorenabled" ' +       '{{value}} ' +       ' /div ' +       ' div ng-show="view.editorenabled" ng-click="save()" ' +       ' input type="hidden" ui-select2="select2options" ng-model="view.editablevalue" ng-change="changetext()" / ' +       ' /div ' +       ' /td ';        return {           restrict: "a",           replace: true,           template: editortemplate,           scope: {               value: "=clicktoeditselect2"           },           controller: function($scope, $element, $attrs) {                $scope.view = {                   editorenabled: false               };                $scope.enableeditor = function() {                        $scope.view.editorenabled = true;                       $scope.view.editablevalue = $scope.value;                };                $scope.disableeditor = function() {                   $scope.view.editorenabled = false;               };                $scope.save = function() {                   $scope.value = $scope.view.editablevalue.id;                   $scope.disableeditor();               };                 var initselectioncb = function(item, callback) {                   if (item != "") {                       var id = item.val();                       var data = { id: id, text: id };                       callback(data);                   }               };                $scope.select2options = {                    placeholder: "select",                   multiple: false,                   width: "resolve",                   initselection: function(item, callback) {                       //selects the initial item                       initselectioncb.call(self, item, callback);                   },                   ajax: {                        url: "/getdropdownlistforselect2",                       type: "post",                       contenttype: "application/json",                       data: function(term, page) {                            var json = {};                           json.term = term;                           json.page = page;                            return json;                        },                       results: function(data, page) {                           return { results: data.options };                       }                   }               }             }       };   });    
bringing   bootsrap typeahead above modal  this is my situation,    how can i fix this?          broswer.css  tried to remove- but changed nothing     i have two versions of modal.js new one where typeahead is below the modal      /* =========================================================  *  -modal.js v2.0.1  * http:// .github.com/ /javascript.html#modals  * =========================================================  * copyright 2012  , inc.  *  * licensed under the apache license, version 2.0 (the "license");  * you may not use this file except in compliance with the license.  * you may obtain a copy of the license at  *  *   *  * unless required by applicable law or agreed to in writing, software  * distributed under the license is distributed on an "as is" basis,  * without warranties or conditions of any kind, either express or implied.  * see the license for the specific language governing permissions and  * limitations under the license.  * ========================================================= */   !function( $ ){    "use strict"   /* modal class definition   * ====================== */    var modal = function ( content, options ) {     this.options = options     this.$element = $(content)       .delegate('[data-dismiss="modal"]', 'click.dismiss.modal', $.proxy(this.hide, this))   }    modal.prototype = {        constructor: modal      , toggle: function () {         return this[!this.isshown ? 'show' : 'hide']()       }      , show: function () {         var that = this          if (this.isshown) return          $('body').addclass('modal-open')          this.isshown = true         this.$element.trigger('show')          escape.call(this)         backdrop.call(this, function () {           var transition = $.support.transition    that.$element.hasclass('fade')            !that.$element.parent().length    that.$element.appendto(document.body) //don't move modals dom position            that.$element             .show()            if (transition) {             that.$element[0].offsetwidth // force reflow           }            that.$element.addclass('in')            transition ?             that.$element.one($.support.transition.end, function () { that.$element.trigger('shown') }) :             that.$element.trigger('shown')          })       }      , hide: function ( e ) {         e    e.preventdefault()          if (!this.isshown) return          var that = this         this.isshown = false          $('body').removeclass('modal-open')          escape.call(this)          this.$element           .trigger('hide')           .removeclass('in')          $.support.transition    this.$element.hasclass('fade') ?           hidewithtransition.call(this) :           hidemodal.call(this)       }    }    /* modal private methods   * ===================== */    function hidewithtransition() {     var that = this       , timeout = settimeout(function () {           that.$element.off($.support.transition.end)           hidemodal.call(that)         }, 500)      this.$element.one($.support.transition.end, function () {       cleartimeout(timeout)       hidemodal.call(that)     })   }    function hidemodal( that ) {     this.$element       .hide()       .trigger('hidden')      backdrop.call(this)   }    function backdrop( callback ) {     var that = this       , animate = this.$element.hasclass('fade') ? 'fade' : ''      if (this.isshown    this.options.backdrop) {       var doanimate = $.support.transition    animate        this.$backdrop = $(' div class="modal-backdrop ' + animate + '" / ')         .appendto(document.body)        if (this.options.backdrop != 'static') {         this.$backdrop.click($.proxy(this.hide, this))       }        if (doanimate) this.$backdrop[0].offsetwidth // force reflow        this.$backdrop.addclass('in')        doanimate ?         this.$backdrop.one($.support.transition.end, callback) :         callback()      } else if (!this.isshown    this.$backdrop) {       this.$backdrop.removeclass('in')        $.support.transition    this.$element.hasclass('fade')?         this.$backdrop.one($.support.transition.end, $.proxy(removebackdrop, this)) :         removebackdrop.call(this)      } else if (callback) {       callback()     }   }    function removebackdrop() {     this.$backdrop.remove()     this.$backdrop = null   }    function escape() {     var that = this     if (this.isshown    this.options.keyboard) {       $(document).on('keyup.dismiss.modal', function ( e ) {         e.which == 27    that.hide()       })     } else if (!this.isshown) {       $(document).off('keyup.dismiss.modal')     }   }    /* modal plugin definition   * ======================= */    $.fn.modal = function ( option ) {     return this.each(function () {       var $this = $(this)         , data = $this.data('modal')         , options = $.extend({}, $.fn.modal.defaults, $this.data(), typeof option == 'object'    option)       if (!data) $this.data('modal', (data = new modal(this, options)))       if (typeof option == 'string') data[option]()       else if (options.show) data.show()     })   }    $.fn.modal.defaults = {       backdrop: true     , keyboard: true     , show: true   }    $.fn.modal.constructor = modal    /* modal data-api   * ============== */    $(function () {     $('body').on('click.modal.data-api', '[data-toggle="modal"]', function ( e ) {       var $this = $(this), href         , $target = $($this.attr('data-target') || (href = $this.attr('href'))    href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7         , option = $target.data('modal') ? 'toggle' : $.extend({}, $target.data(), $this.data())        e.preventdefault()       $target.modal(option)     })   })  }( window.jquery );       the old version, where typeahead is on top of the modal but all the modals are opened on load.      /* ========================================================= *  -modal.js v1.4.0 * http:// .github.com/ /javascript.html#modal * ========================================================= * copyright 2011  , inc. * * licensed under the apache license, version 2.0 (the "license"); * you may not use this file except in compliance with the license. * you may obtain a copy of the license at * *   unless required by applicable law or agreed to in writing, software * distributed under the license is distributed on an "as is" basis, * without warranties or conditions of any kind, either express or implied. * see the license for the specific language governing permissions and * limitations under the license. * ========================================================= */   !function ($) {      "use strict"      /* css transition support (     * ======================================================= */      var transitionend      $(document).ready(function () {          $.support.transition = (function () {             var thisbody = document.body || document.documentelement         , thisstyle = thisbody.style         , support = thisstyle.transition !== undefined || thisstyle.webkittransition !== undefined || thisstyle.moztransition !== undefined || thisstyle.mstransition !== undefined || thisstyle.otransition !== undefined             return support         })()          // set css transition event type         if ($.support.transition) {             transitionend = "transitionend"             if ($.browser.webkit) {                 transitionend = "webkittransitionend"             } else if ($.browser.mozilla) {                 transitionend = "transitionend"             } else if ($.browser.opera) {                 transitionend = "otransitionend"             }         }      })       /* modal public class definition     * ============================= */      var modal = function (content, options) {         this.settings = $.extend({}, $.fn.modal.defaults, options)         this.$element = $(content)       .delegate('.close', 'click.modal', $.proxy(this.hide, this))          if (this.settings.show) {             this.show()         }          return this     }      modal.prototype = {          toggle: function () {             return this[!this.isshown ? 'show' : 'hide']()         }      , show: function () {         var that = this         this.isshown = true         this.$element.trigger('show')          escape.call(this)         backdrop.call(this, function () {             var transition = $.support.transition    that.$element.hasclass('fade')              that.$element             .appendto(document.body)             .show()              if (transition) {                 that.$element[0].offsetwidth // force reflow             }              that.$element.addclass('in')              transition ?             that.$element.one(transitionend, function () { that.$element.trigger('shown') }) :             that.$element.trigger('shown')          })          return this     }      , hide: function (e) {         e    e.preventdefault()          if (!this.isshown) {             return this         }          var that = this         this.isshown = false          escape.call(this)          this.$element           .trigger('hide')           .removeclass('in')          $.support.transition    this.$element.hasclass('fade') ?           hidewithtransition.call(this) :           hidemodal.call(this)          return this     }      }       /* modal private methods     * ===================== */      function hidewithtransition() {         // firefox drops transitionend events :{o         var that = this       , timeout = settimeout(function () {           that.$element.unbind(transitionend)           hidemodal.call(that)       }, 500)          this.$element.one(transitionend, function () {             cleartimeout(timeout)             hidemodal.call(that)         })     }      function hidemodal(that) {         this.$element       .hide()       .trigger('hidden')          backdrop.call(this)     }      function backdrop(callback) {         var that = this       , animate = this.$element.hasclass('fade') ? 'fade' : ''         if (this.isshown    this.settings.backdrop) {             var doanimate = $.support.transition    animate              this.$backdrop = $(' div class="modal-backdrop ' + animate + '" / ')         .appendto(document.body)              if (this.settings.backdrop != 'static') {                 this.$backdrop.click($.proxy(this.hide, this))             }              if (doanimate) {                 this.$backdrop[0].offsetwidth // force reflow             }              this.$backdrop.addclass('in')              doanimate ?         this.$backdrop.one(transitionend, callback) :         callback()          } else if (!this.isshown    this.$backdrop) {             this.$backdrop.removeclass('in')              $.support.transition    this.$element.hasclass('fade') ?         this.$backdrop.one(transitionend, $.proxy(removebackdrop, this)) :         removebackdrop.call(this)          } else if (callback) {             callback()         }     }      function removebackdrop() {         this.$backdrop.remove()         this.$backdrop = null     }      function escape() {         var that = this         if (this.isshown    this.settings.keyboard) {             $(document).bind('keyup.modal', function (e) {                 if (e.which == 27) {                     that.hide()                 }             })         } else if (!this.isshown) {             $(document).unbind('keyup.modal')         }     }       /* modal plugin definition     * ======================= */      $.fn.modal = function (options) {         var modal = this.data('modal')          if (!modal) {              if (typeof options == 'string') {                 options = {                     show: /show|toggle/.test(options)                 }             }              return this.each(function () {                 $(this).data('modal', new modal(this, options))             })         }          if (options === true) {             return modal         }          if (typeof options == 'string') {             modal[options]()         } else if (modal) {             modal.toggle()         }          return this     }      $.fn.modal.modal = modal      $.fn.modal.defaults = {         backdrop: false   , keyboard: false   , show: false     }       /* modal data- implementation     * ========================== */      $(document).ready(function () {         $('body').delegate('[data-controls-modal]', 'click', function (e) {             e.preventdefault()             var $this = $(this).data('show', true)             $('#' + $this.attr('data-controls-modal')).modal($this.data())         })     })  } (window.jquery || window.ender);    